{\rtf1\ansi\ansicpg936\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;\red212\green214\blue154;\red23\green23\blue23;\red202\green202\blue202;
\red194\green126\blue101;\red70\green137\blue204;\red66\green179\blue255;\red140\green211\blue254;\red183\green111\blue179;
}
{\*\expandedcolortbl;;\cssrgb\c86275\c86275\c66667;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c80784\c56863\c47059;\cssrgb\c33725\c61176\c83922;\cssrgb\c30980\c75686\c100000;\cssrgb\c61176\c86275\c99608;\cssrgb\c77255\c52549\c75294;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww29740\viewh17460\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Node tutorial\
\
\
1) node install node engine package, then check with termnial, type node \'97 version, if success, it will show node version number\
2) REPL or CLI, terminal type in node , then it will be same as chrome V8 engine \
\
3) open CLI VS code, drag folder into studio i.e. Tutorial, then start you first program, then save, open terminal , type in 
\fs28 node 
\f1\b app.js
\f0\b0\fs24  will run code , in the studio open view->terminal, 
\fs28 node 
\f1\b app.js
\f0\b0\fs24  will be same  \
\
\
\
10 may\
\
1) Require keyword is same import in C#\
\
2) module is like global keyword, module is object in node the property exports will declare object as global variable i.e. module.exports.sinlePerson=person, module.exports.items=[item1,item2], module.exports=\{John,peter\}, module.exports=sayHi\
\
Javsscript is non-casesentive, but always begin with lower case\
\
\
const a=1\
\
Const addValue() \{\
Console.log(a)\
\}\
\
\
Output variable value must be with `` and \{\} .I.e.  console.log(`the output is $\{num1+num2\} `)\
\
\
11th may\
\
Three  important built-in modules, const fs=module(\'91fs\'92),const os=module(\'91os\'92),const http=module(\'91http\'92)\
Template string `` , it will be used with $\{num1\}\
\
i.e. os.type()\
 one important concept in File module is Sync (block) & Async(non-block), we need to use async read and write object because too many read & write at same time , there will be a block for the process\
\
\
Const first =readSyncfile(\'91./content/first.txt\'92,\'92utf8\'92)\
\
Const first=readfile(\'91./content/first.txt\'92,\'92utf8\'92,(error,result)=>\{\})\
\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 writeFileSync\cf4 \strokec4 (\cf5 \strokec5 './content/resultsync.txt'\cf4 \strokec4 ,\cf5 \strokec5 `the reslt is \cf6 \strokec6 $\{\cf7 \strokec7 first\cf6 \strokec6 \}\cf5 \strokec5  \cf6 \strokec6 $\{\cf7 \strokec7 second\cf6 \strokec6 \}\cf5 \strokec5 `\cf4 \strokec4 ,\{\cf8 \strokec8 flag:\cf5 \strokec5 'a'\cf4 \strokec4 \})\
\
\cf2 \strokec2 writeFile\cf4 \strokec4 (\cf5 \strokec5 './content/result-async.txt'\cf4 \strokec4 , \cf5 \strokec5 `the result is \cf6 \strokec6 $\{\cf7 \strokec7 first\cf6 \strokec6 \}\cf5 \strokec5  \cf6 \strokec6 $\{\cf7 \strokec7 second\cf6 \strokec6 \}\cf5 \strokec5 `\cf4 \strokec4 , (\cf8 \strokec8 error\cf4 \strokec4 , \cf8 \strokec8 result\cf4 \strokec4 ) \cf6 \strokec6 =>\cf4 \strokec4  \{\cb1 \
\
\cb3             \cf9 \cb3 \strokec9 if\cf4 \cb3 \strokec4  (\cf8 \strokec8 error\cf4 \strokec4 ) \{\cb1 \
\cb3                 \cf8 \strokec8 console\cf4 \strokec4 .\cf2 \strokec2 log\cf4 \strokec4 (\cf8 \strokec8 error\cf4 \strokec4 )\cb1 \
\cb3             \}\cb1 \
\cb3             \cf8 \strokec8 console\cf4 \strokec4 .\cf2 \strokec2 log\cf4 \strokec4 (\cf5 \strokec5 'stop this task'\cf4 \strokec4 )\cb1 \
\cb3         \})\cb1 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
 \
\
\
 \
\
\
\
 \
\
\
 \
}